ðŸ’¡ Problem 1: Nested Filtering and Mapping
Description:
Given a list of Employee objects, where each Employee has a list of Project objects, return a list of all unique project names that are assigned to more than 2 employees.

Constraints:

Must use only Streams, Lambda expressions, and functional interfaces.

No traditional loops or if-statements allowed.

ðŸ’¡ Problem 2: Custom Functional Interface Chain
Description:
Create a custom functional interface TriFunction<A, B, C, R> and use it in a lambda chain to:

Take three inputs (String name, Integer age, Double salary)

Produce a formatted summary string

Then collect results from a list of inputs into a Map where key = name and value = summary

ðŸ’¡ Problem 3: Comparator Factory Using Lambdas
Description:
Write a lambda-based ComparatorFactory that returns comparators for objects based on the provided key extractor (i.e., a Function<T, U>).
Then, use it to sort a list of students by name, GPA, and age.

ðŸ’¡ Problem 4: Stream-Based Expression Evaluator
Description:
Given a list of mathematical expression strings like ["2 + 3", "4 * 5", "7 - 1"], implement a parser using lambdas and functional interfaces that:

Tokenizes each expression

Maps tokens to operators using lambdas (e.g., Map<String, BinaryOperator<Integer>>)

Evaluates the result using streams

ðŸ’¡ Problem 5: Multi-Level Grouping
Description:
Given a list of Transaction objects, group them first by year, then by transaction type, then sum their amounts. Return a nested Map<Integer, Map<String, Integer>>.

Constraints:

No loops or imperative logic.

Use only lambdas, collectors, and functional interfaces.